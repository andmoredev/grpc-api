AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Network infrastructure template for Hello World UDP application

# Parameters:
#   CertificateDomainName:
#     Type: String
#     Description: Domain name for the SSL/TLS certificate

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  # ALBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for Application Load Balancer
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 50051
  #         ToPort: 50051
  #         CidrIp: 0.0.0.0/0
  #     SecurityGroupEgress:
  #       - IpProtocol: "-1"
  #         CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Hello World ECS task
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 50051
          ToPort: 50051
          # SourceSecurityGroupId: !Ref ALBSecurityGroup
          CidrIp: 0.0.0.0/0 # This is instead of sourcesecuritygroupid
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ApplicationLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: grpc-alb
  #     Subnets:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref ALBSecurityGroup
  #     Scheme: internet-facing
  #     Type: application
  #     LoadBalancerAttributes:
  #       - Key: idle_timeout.timeout_seconds
  #         Value: '3600'

  # TargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     VpcId: !Ref VPC
  #     Port: 50051
  #     Protocol: HTTPS
  #     TargetType: ip
  #     HealthCheckEnabled: true
  #     HealthCheckPath: '/grpc.health.v1.Health/Check'
  #     HealthCheckIntervalSeconds: 30
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     UnhealthyThresholdCount: 2
  #     HealthCheckPort: 50051
  #     TargetGroupAttributes:
  #       - Key: deregistration_delay.timeout_seconds
  #         Value: '30'

  # LoadBalancerSSLCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref CertificateDomainName
  #     ValidationMethod: DNS

  # Listener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: 50051
  #     Protocol: HTTPS
  #     SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
  #     Certificates:
  #       - CertificateArn: !Ref LoadBalancerSSLCertificate
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-network-VpcId"

  ECSSecurityGroupId:
    Description: Security Group ID for ECS Tasks
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-network-SecurityGroupId"

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-network-PublicSubnet1Id"

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-network-PublicSubnet2Id"

  # LoadBalancerDNS:
  #   Description: DNS name of the load balancer
  #   Value: !GetAtt ApplicationLoadBalancer.DNSName
  #   Export:
  #     Name: !Sub "${AWS::StackName}-network-LoadBalancerDNS"

  # TargetGroupArn:
  #   Description: ARN of the Target Group
  #   Value: !Ref TargetGroup
  #   Export:
  #     Name: !Sub "${AWS::StackName}-network-TargetGroupArn"